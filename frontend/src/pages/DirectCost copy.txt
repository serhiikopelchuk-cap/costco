// import React, { useState } from 'react';
// import './DirectCost.css';
// import AddCategoryForm from '../components/AddCategoryForm';
// import CostItemRow from '../components/CostItemRow';
// import CategoryHeader from '../components/CategoryHeader';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faPencilAlt, faSave } from '@fortawesome/free-solid-svg-icons';

// const DirectCost = () => {
//   const [data, setData] = useState([
//     {
//       category: 'Compute Costs',
//       description: 'Costs associated with virtual machines, virtual machine scale sets, and container instances',
//       note: 'Azure Cost Management + Billing > Cost Analysis. Filter by resource type and time period',
//       items: [
//         { name: 'Azure Container Instances', costs: [20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10] },
//         { name: 'Azure Kubernetes Service (AKS)', costs: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
//         { name: 'Azure Container Registry', costs: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
//         // Add more items as needed
//       ],
//     },
//     {
//       category: 'Storage Costs',
//       description: 'Costs associated with block storage, file storage, and object storage',
//       note: 'Azure Cost Management + Billing > Cost Analysis. Filter by resource type and time period',
//       items: [
//         { name: 'Azure Container Instances', costs: [20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10] },
//         { name: 'Azure Kubernetes Service (AKS)', costs: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
//         { name: 'Azure Container Registry', costs: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
//         // Add more items as needed
//       ],
//     }
//     // Add more categories as needed
//   ]);

//   const [newItem, setNewItem] = useState({ name: '', costs: Array(13).fill(0) });
//   const [editingNoteIndex, setEditingNoteIndex] = useState<number | null>(null);
//   const [editedNote, setEditedNote] = useState('');

//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
//     const updatedCosts = [...newItem.costs];
//     updatedCosts[index] = parseFloat(e.target.value) || 0;
//     setNewItem({ ...newItem, costs: updatedCosts });
//   };

//   const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     setNewItem({ ...newItem, name: e.target.value });
//   };

//   const addItem = (categoryIndex: number) => {
//     const updatedData = [...data];
//     updatedData[categoryIndex].items.push(newItem);
//     setData(updatedData);
//     setNewItem({ name: '', costs: Array(13).fill(0) });
//   };

//   const addCategory = (newCategory: { category: string; description: string; note: string; items: any[] }) => {
//     setData([...data, newCategory]);
//   };

//   const handleSave = (categoryIndex: number, itemIndex: number, updatedItem: { name: string; costs: number[] }) => {
//     const updatedData = [...data];
//     updatedData[categoryIndex].items[itemIndex] = updatedItem;
//     setData(updatedData);
//   };

//   const handleDelete = (categoryIndex: number, itemIndex: number) => {
//     const updatedData = [...data];
//     updatedData[categoryIndex].items.splice(itemIndex, 1);
//     setData(updatedData);
//   };

//   const handleCategoryDelete = (categoryIndex: number) => {
//     const updatedData = [...data];
//     updatedData.splice(categoryIndex, 1);
//     setData(updatedData);
//   };

//   const handleCategorySave = (index: number, updatedCategory: { category: string; description: string }) => {
//     const updatedData = [...data];
//     updatedData[index].category = updatedCategory.category;
//     updatedData[index].description = updatedCategory.description;
//     setData(updatedData);
//   };

//   const handleNoteEditClick = (index: number) => {
//     setEditingNoteIndex(index);
//     setEditedNote(data[index].note);
//   };

//   const handleNoteSaveClick = (index: number) => {
//     const updatedData = [...data];
//     updatedData[index].note = editedNote;
//     setData(updatedData);
//     setEditingNoteIndex(null);
//   };

//   const handleNoteChange = (e: React.ChangeEvent<HTMLInputElement>) => {
//     setEditedNote(e.target.value);
//   };

//   return (
//     <div className="container">
//       <h1>Annual Direct Cost</h1>
//       {data.map((category, categoryIndex) => (
//         <div key={categoryIndex} className="category">
//           <CategoryHeader
//             category={category.category}
//             description={category.description}
//             onSave={(updatedCategory) => handleCategorySave(categoryIndex, updatedCategory)}
//             onDelete={() => handleCategoryDelete(categoryIndex)}
//           />
//           <table>
//             <thead>
//               <tr className="note-row">
//                 <th colSpan={15} className="note">
//                   {editingNoteIndex === categoryIndex ? (
//                     <input
//                       type="text"
//                       value={editedNote}
//                       onChange={handleNoteChange}
//                     />
//                   ) : (
//                     category.note
//                   )}
//                   <FontAwesomeIcon
//                     icon={editingNoteIndex === categoryIndex ? faSave : faPencilAlt}
//                     className="pencil-icon"
//                     onClick={() =>
//                       editingNoteIndex === categoryIndex
//                         ? handleNoteSaveClick(categoryIndex)
//                         : handleNoteEditClick(categoryIndex)
//                     }
//                   />
//                 </th>
//               </tr>
//               <tr>
//                 <th>Period totals:</th>
//                 {Array.from({ length: 13 }, (_, i) => <th key={i}>P{i + 1}</th>)}
//                 <th>Total</th>
//                 <th>Average</th>
//               </tr>
//             </thead>
//             <tbody>
//               {category.items.map((item, itemIndex) => (
//                 <CostItemRow
//                   key={itemIndex}
//                   item={item}
//                   onSave={(updatedItem) => handleSave(categoryIndex, itemIndex, updatedItem)}
//                   onDelete={() => handleDelete(categoryIndex, itemIndex)}
//                 />
//               ))}
//               <tr>
//                 <td>
//                   <input
//                     type="text"
//                     value={newItem.name}
//                     onChange={handleNameChange}
//                     placeholder="New Item Name"
//                   />
//                 </td>
//                 {newItem.costs.map((cost, i) => (
//                   <td key={i}>
//                     <input
//                       type="number"
//                       value={cost}
//                       onChange={(e) => handleInputChange(e, i)}
//                       placeholder="0"
//                     />
//                   </td>
//                 ))}
//                 <td>${newItem.costs.reduce((acc, cost) => acc + cost, 0)}</td>
//                 <td>${(newItem.costs.reduce((acc, cost) => acc + cost, 0) / newItem.costs.length).toFixed(2)}</td>
//                 <td>
//                   <button className="add-button" onClick={() => addItem(categoryIndex)}>Add</button>
//                 </td>
//               </tr>
//             </tbody>
//           </table>
//         </div>
//       ))}
//       <AddCategoryForm onAddCategory={addCategory} />
//     </div>
//   );
// };

// export default DirectCost;